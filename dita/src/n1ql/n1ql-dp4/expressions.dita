<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="reference_kqy_tgq_kn">
  <title>Expressions</title>
  <shortdesc>N1QL expressions are like formulas written in a query language. They include operators, 
    symbols and values to evaluate and filter result objects.</shortdesc>
  
  <refbody>
 
    <section>
      <title>Types of expressions</title>
      <ul>
        <li>Literal values</li>
        <li>Identifiers</li>
        <li>Nested expressions</li>
        <li>Case expressions</li>
        <li>Collection expressions</li>
        <li>Logical expressions</li>
        <li>Comparison expressions</li>
        <li>Arithmetic expressions</li>
        <li>String expressions</li>
        <li>Function name expressions</li>
      </ul>
      
    </section>
    
    
    <section>
      <title>Compatibility</title>
      <p>Compatible with Couchbase Server 2.2</p>
    </section>

    
    <section><title>Literal values</title>  
      <p>Literal value expressions returns any record that matches the literal expression provided in a query andincludes standard literal values in JSON. 
        This includes strings, numbers, objects, arrays, the boolean TRUE/FALSE as well as NULL. 
        The rules defined at json.org apply to literal values in N1QL with two exceptions: JSON arrays and objects.</p>
      <p>Literal values include strings, numbers, objects, arrays, TRUE, FALSE, and NULL.</p>
        <ul>
          <li>JSON arrays and objects can only contain nested values.</li>
          <li>In N1QL, literal arrays and objects can also contain nested expressions.</li>
          <li>In JSON ‘true’, ‘false’, and ‘null’ are case-sensitive.</li>
          <li>In N1QL, they are case-insensitive to be consistent with other keywords.</li>
        </ul> 
 
      <p>The following query returns emails from contacts where the contact name is ‘dave’.</p>
      <codeblock>
SELECT email FROM contacts AS contact WHERE contact.name = 'dave'
  
{
  "email": "dave@gmail.com"
}
  </codeblock>
 </section>
    
 
<section><title>Identifiers</title>
      <p>Identifiers, also known as a path, can be an escaped or unescaped identifier. Unescaped
        identifiers support the most common identifiers in JSON as a simpler syntax (0-9, a-z, A-Z,
        _, and $). Escaped identifiers are surrounded by back-ticks and support all identifiers in
        JSON. Using two back-ticks within an escaped identifier creates a single back-tick. An
        identifier is a reference to a value in the current context of a query. </p>
      <p>For instance, for a contacts database with the following document structure, the identifier
          <codeph>person.lastName</codeph> evaluates to the value, Irving. </p>
      
      <codeblock>
   `{
   "firstName" : "Geremy"
   "lastName" : "Irving"
   }
 </codeblock>
</section>
    
    
    
    
    <section>
      <title>Nested expressions</title>
      <p>
        Nested expressions specify fields nested inside of other objects. 
        It can include the dot operator as well as bracket notation, <codeph>[position] or [start:end (optional) ]</codeph>, 
        to access items in an array or object. </p>
      
      <p>Array slicing is available. Array slicing is in the form of <codeph>source-array [ start : end ]</codeph>. 
        It returns a new array containing a subset of the source array, 
        containing the elements from position <codeph>start</codeph> to <codeph>end-1</codeph>. 
        The element at <codeph>start</codeph> is included, while the element at <codeph>end</codeph> is not. 
        If <codeph>end</codeph> is omitted, all elements from <codeph>start</codeph> to the end of the source array are included.</p>
      
      <p>The following shows general nested expression syntax.</p>
      <codeblock>
expr.identifier
expr [ expr : expr ]        
      </codeblock>
      
      <p>The following shows a document and expressions with equivalent values.</p>
      <codeblock>
{
    "address": {
    "city": "Mountain View"
    },
    "revisions": [2013, 2012, 2011, 2010]
}
      </codeblock>      
      
      
      <ul>
        <li>The expression address.city evalutes to the value, Mountain View.</li>
        <li>The expression revisions[0] evaluates to the value, 2013.</li>
        <li>The expression revisions[1:3] evaluates to the array value, [2012, 2011].</li>
        <li>The expression revisions[1:] evaluates to the array value [2012, 2011, 2010].</li>
      </ul>
      
      <p>  
      </p>
      

    
    </section>

    <section>
      <title>Case expressions</title>
      <p>Case expressions evaluates conditional logic in an expression.
        For example the following uses a `CASE` clause to handle documents that do not have an ship date. 
        This scans all orders and if an order has a shipped-on date, provide it in the result set. 
        If an order does not have a shipped-on date, it provides default text instead.
      </p>
      <p>Case expressions include WHEN, THEN, ELSE, and END.</p>
      <ul>
        <li>If the first WHEN expression evaluates to TRUE, the result for this expression is the THEN expression.</li> 
        <li>If the first WHEN evaluates to FALSE, then the next WHEN clauses are evaluated.</li> 
        <li>If no WHEN clause evaluates to TRUE, the result is the ELSE expression.</li>
        <li>If no ELSE expression is provided in the clause, the result is NULL.</li>
      </ul>
      
      
      <codeblock>
SELECT CASE WHEN `shipped-on` IS NOT NULL THEN `shipped-on` ELSE \"not-shipped-yet\" END AS shipped FROM orders
   
      { "shipped": "2013/01/02" },
      { "shipped": "2013/01/12" },
      { "shipped": "not-shipped-yet" },
      ....
      </codeblock>
      
    </section>

    <section>
      <title>Collection expressions</title>
      <p>Collection expressions valuate expressions using nested collections. The different forms of
        collection expressions are specified using <codeph>ANY</codeph>, <codeph>EVERY</codeph>,
          <codeph>FIRST</codeph>, or <codeph>ARRAY</codeph>. Provides an array to evaluate as a
          <codeph>path</codeph> in a <codeph>SATISFIES</codeph> clause. The server iterates through
        each element in the array and assign each item an <codeph>identifier</codeph> from the
          <codeph>IN</codeph> clause. The <codeph>identifier</codeph> is only used as a identifier
        within the collection expression and is distinct from identifiers provided in other
        clauses.</p>
        
        <ul>
          <li><codeph>ANY</codeph> - If at least one item in the array satisfies the <codeph>ANY</codeph> expression, then returns <codeph>TRUE</codeph>, otherwise returns <codeph>FALSE</codeph>.</li>
          <li><codeph>EVERY</codeph> - If every array element satisfies the <codeph>EVERY</codeph> expression, the return TRUE. Otherwise return <codeph>FALSE.</codeph> If the array is empty, return <codeph>TRUE</codeph>.</li>
          <li><codeph>FIRST</codeph> - Returns the evaluated expression using the first array element (that satisfies the <codeph>WHEN</codeph> clause, if provided).</li>
          <li><codeph>ARRAY</codeph> - Returns a new array of the evaluated expression (that
          satisifies the <codeph>WHEN</codeph> clause, if provided).</li>
        </ul>

<p>ANY returns TRUE if one or more items meet the condition. In the following query, all contacts
        who have one or more children over the age of 14 are retrieved. This query returns at one
        item for 'dave' because one of his children is 17. </p>

<codeblock>
SELECT name FROM contacts WHERE ANY child IN children SATISFIES child.age > 14 END


"results": [
{
"name": "dave"
},
....
]
</codeblock>


<p>EVERY returns TRUE if all items meet the condition. For example, this query is almost identical
        to the one above with the ANY clause except EVERY is substituted. This query scans all
        contacts and returns the name of any contact that has children over the age of 10. This
        tells us that out of all of the contacts only 'ian' has children who are both over the age
        10. </p>

<codeblock>
SELECT name FROM contacts WHERE EVERY child IN children SATISFIES child.age > 10 END


{
"name": "ian"
}
</codeblock>

      
    </section>
    
    
    
    <section>
      <title>Logical expressions</title>
      <p>Logical expressions combine other expression with boolean logic including
        <codeph>AND</codeph>, <codeph>OR</codeph>, and <codeph>NOT</codeph>. 
        Logical expressions can be used to provide logical operators, for example, 
        two conditions can be tested at the same time in a query. 
        This query scans all contacts and output the name of any contact 
        with more than one child who also has an email ending in '@gmail'. </p>

      
      <codeblock>
SELECT name FROM tutorial WHERE LENGTH(children) > 0 AND email LIKE '%@gmail.com'


{
	"name": "dave"
	...
},
      </codeblock>
      
    </section>
    
    
    
    <section>
      <title>Comparison expressions</title>
      <p>Comparison expressions compare the results of two expressions.</p>
      <p>Arithmetic operators include equal (<codeph>=</codeph>), 
        less than (<codeph>&lt;</codeph>), 
        greater than (<codeph>&gt;</codeph>), 
        less than or equal to (<codeph>=&lt;</codeph>), and greater than or equal to (<codeph>&gt;=</codeph>). 
        The terms <codeph>=</codeph> and <codeph>==</codeph> are functional equivalents of equal (provided for compatibility with other languages). 
        The terms != and &lt;&gt; are also equivalent comparisons provided for compatibility.</p>
        
        <ul>
          <li>If a comparison term is missing from the clause, MISSING is returned. </li>
          <li>If either operand in a comparison results in NULL, NULL is returned. </li>
          <li>If comparison operators return results of different types, FALSE is returned.</li>
        </ul>
        
        <p>By default, string comparisons use raw collation (also known as binary collation). 
        This collation is case sensitive. To perform case-insensitive comparisons, 
        first transform a string with <codeph>UPPER()</codeph> or <codeph>LOWER()</codeph> functions.</p>
        <p>The LIKE operator allows wildcard matching in strings. 
        A pattern to the right of the operators can optionally contain the wildcard characters percentage or underscore:</p>
        <ul>
          <li>The percentage sign (%) indicates any string of zero or more characters.</li>
          <li>The underscore (_) matches any single character.</li>
        </ul>
         
        
        <p>NULL or MISSING values have special comparison terms to determine type information.</p>
  
  
  <p>LIKE returns contacts are similar to a given string. For example, to get all contacts with an email ending with '@yahoo'. 
    The % indicates any characters prior to @ can appear.
  </p>
      <codeblock>

SELECT name, email
            FROM tutorial 
                WHERE email LIKE '%@yahoo.com'

{
            "email": "harry@yahoo.com",
            "name": "harry"
 },
      </codeblock>

<p>NOT LIKE is the inverse of `LIKE`. It returns items that are not like the given string. For example, the following clause will return all emails from contacts which do not contain `@yahoo`.
</p>
<codeblock>
SELECT name, email
            FROM tutorial 
                WHERE email NOT LIKE '%@yahoo.com'


{
            "email": "dave@gmail.com",
            "name": "dave"
},
      </codeblock>      
    </section>
    
    
    
    <section>
      <title>Arithmetic expressions</title>
      <p>Arithmetic operations perform arithmetic methods within an expression. 
        Arithmetic operations can be applied to any numerical values retrieved as part of query clauses.
        This includes basic mathematical operations such as addition, subtraction, multiplication, divisions, and modulo. 
        In addition, a negation operation changes the sign of a value.</p>
      
      <p>This query selects the document where name is 'dave' and return the name, age and age times 12</p>
      
      <codeblock>
SELECT name, age, age*12 AS age_in_months
            FROM tutorial 
                WHERE name = 'dave'

{
          "age": 45,
          "age_in_months": 540,
          "name": "dave"
}
      </codeblock>      
    </section>
    
    
    
    <section>
      <title>String expressions</title>
      <p>If both operands are strings, the <codeph>||</codeph>
        operator concatenates the strings, otherwise, the expression evaluates to NULL. 
      The folloiwng example shows concatenation of two strings.</p>
        
        <codeblock>
SELECT firstName || " " || lastName as fullName
  FROM customer
  WHERE emailAddress LIKE "%.biz”    
      </codeblock>
      
      <p>Returns:</p>
      
      <codeblock>
"resultset": [  
{
      "emailAddress": "don@armstronghaley.biz",
      "fullName": "Don Pinto"
    }, .....
        
      </codeblock>
        
      
    </section>
    
    <section>
      <title>Function name expression</title>
      <p>Function names are used to apply a function to values, to values at a specified path, or to
        values derived from a DISTINCT clause. Function names are case-insensitive. The following shows general function name syntax.
      </p> 
        <codeblock>
function-name ( [ [ DISTINCT ] * | path.* | expr [, ... ] ] )          
        </codeblock>
    </section>
 
 
    <section>
      <title>Example customer order document</title>
      <p>Some expression examples and result outputs are based on the following customer order document.</p>
      
      <codeblock>
{
            "type":"contact",
            "name":"dave",
            "age": 45,
            "email": "dave@gmail.com",
            "children":[
                {"name":"aiden","age":17,"gender":"m"},
                {"name":"bill","age":2,"gender":"f"}
                ],
            ....
}
        
      </codeblock>
    </section>

  </refbody>
  
  <related-links>
    <link href="operators.dita"><linktext>Operators</linktext></link>
    <link href="aggregate-function.dita"><linktext>Aggregate functions</linktext></link>
    <link href="scalar-function.dita"><linktext>Scalar functions</linktext></link>
  </related-links> 
  
  
</reference>
