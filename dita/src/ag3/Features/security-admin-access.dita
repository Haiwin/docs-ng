<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_pgw_k2h_14">
  <title>Encrypted admin access</title>
  <shortdesc>Encrypted administrator access provides encrypted REST API access using Secure Socket
    Layer (SSL) authentication. </shortdesc>
  <body>
    
    <p>The encrypted communication allows a connection to be configured for security using Secure Sockets Layer (SSL) encryption. 
      Encryption protects data-in-flight from a remote machines to a Couchbase cluster using SSL. 
      A secure channel is established between the remote machine and the server.</p>
    
    <p>The server generates a self-signed certification for the initial node which is propagated
      throughout the server nodes in the cluster. If the self-signed certificate is regenerated or
      updated as part of setting up XDCR data encryption (or for any other reason), the certificate
      retrieved by the client must be obtained again before secure client-server communication is
      re-established. The secure connection is on the cluster-level (rather than bucket-level) and
      is through the dedicated HTTPS REST port, 18091 or the HTTPS CAPI port, 18092. </p>
    
    <p>Encrypted administrator access is used under a variety of situations: 
      
      <ul>
        <li>An administrator is physically located in a different data center.</li>
        <li>An administrator is outside of the firewall.</li>
        <li>An additional level of security is required.</li>  
      </ul></p>
    
    <p>Secure administrative access is configured using the same method used for encrypted client-server communication:</p>
    
    <ol>
      <li>Connect to the server through an unencrypted port, 8091 REST HTTP or 8092 CAPI HTTP, and 
        using the administratrator username and password.</li>
      <li>Retrieve the SSL self-signed certificate and store in the local file,
          <codeph>remoteCert.pem</codeph>.</li>
      <li>Create the cluster remote reference using the an encrypted port, 18091 REST HTTP or
        18092 CAPI HTTP, and enabling data encryption.</li>
    </ol>
    
    <section><title>Secure client-server REST API</title>
      <p>The following summarizes the HTTP methods used for defining data encryption:</p>
      
      
    </section>
    <table frame="all" id="table_dnc_hzf_44">
      <title>URI paths for setting secure communication</title>
      <tgroup cols="2">
        <colspec colname="c1" colnum="1" colwidth="1*"/>
        <colspec colname="c2" colnum="2" colwidth="1.37*"/>
        <colspec colnum="3" colname="c3" colwidth="1.71*"/>
        <thead>
          <row>
            <entry>HTTP method</entry>
            <entry>URI path</entry>
            <entry>Destription</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>GET</entry>
            <entry>/pools/default/certificate</entry>
            <entry>Retrieves the SSL self-signed certificate from the remote cluster.</entry>
          </row>
          <row>
            <entry>GET</entry>
            <entry>/pools/default/remoteClusters</entry>
            <entry>Retrieves the remote cluster reference.</entry>
          </row>
          <row>
            <entry>POST</entry>
            <entry>/pools/default/remoteClusters</entry>
            <entry>Creates the remote cluster referece.</entry>
          </row>
          <row>
            <entry>PUT</entry>
            <entry>/pools/default/remoteClusters</entry>
            <entry>Modifies the remote cluster reference.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    
    <section><title>Syntax for retrieving the remote certificate</title>
      <codeblock>
curl –X GET  -u adminName:adminPassword
    http://localHost:Port/pools/default/certificate       
    </codeblock>
    </section>
    
    <example><title>Retrieving and storing the certificate</title>
      <codeblock>curl http://10.5.2.54:8091/pools/default/certificate > ./remoteCert.pem</codeblock>
      
    </example>
    
    <example><title>SSL certificate</title>
      <codeblock>-----BEGIN CERTIFICATE-----
MIIC/jCCAeigAwIBAgIIE3jc9BofgigwCwYJKoZIhvcNAQEFMCQxIjAgBgNVBAMT
GUNvdWNoYmFzZSBTZXJ2ZXIgOTRmYTE3YTUwHhcNMTMwMTAxMDAwMDAwWhcNNDkx
MjMxMjM1OTU5WjAkMSIwIAYDVQQDExlDb3VjaGJhc2UgU2VydmVyIDk0ZmExN2E1
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxaaXsKm06xxzzYqejDAO
3qW1x6vLz9jcLdZkNQgxGk4+/ulrfK4PSLHARf4vml8Ev3bcOzCwfyDCp2/TCSX0
qDTn4iBRp9CJtxVyY/xqWkYkld+GGtj28P0CtZ1UKOHCRB7KInzxesxITg/a0vsL
M8GrcwFpmZEJjeY7HGdUuBRcoMfm2Yn28drmr92SNSsz+npdfEFkQloYStqemOOG
h1Jn7ldU5rBj/B2zcvh6guDXKKz/bMMeCTX84BmkG3rmiKQwxyizuxtYi5u1BthC
X3aO58lC9uRMja1lA5TrJnZOCRT24G6VTh2bYhN98W6YmvF9l4ESDR4I7nE8E6Gt
eQIDAQABozgwNjAOBgNVHQ8BAf8EBAMCAKQwEwYDVR0lBAwwCgYIKwYBBQUHAwEw
DwYDVR0TAQH/BAUwAwEB/zALBgkqhkiG9w0BAQUDggEBAF0Bz2MpQoBEdOdDRix3
j0/XGKjH7kI5zDFiOlUvANMeErVZf9kM8xqS7Yd3bCa2rjT1Y8BM3Sciurtrd/Cy
iTVzpXjQOR/K1AFtiBtuNb2Hx5SXvgeW4p4uNmK74u1UUNmAyb3mwSQ+duuqK/Ef
D4wTolPTZP5gcricyWI3qUCi3pTeCz/2jcAWn3DI4KVtlAsOy9sFFo4RxBDgmOuS
klUAb8eu4e2XxcLJ++geYoum0VIKa3ygjpZ800PupwZZetjD8/6tfbYFuoBTXL+r
27M9ArsOxkVbh3fDQ8b8qnr5sam1P7IfSzqq/Lq4vjh1mvred62zuJlMvY9KmNJU
rqw=
-----END CERTIFICATE-----</codeblock>
    </example>
    
    <section><title>Syntax for creating an encrypted client-server connection</title>
      <p>A POST to <codeph>/pools/default/remoteClusters</codeph> creates the remote cluster reference. 
        Setting the <codeph>demandEncryption</codeph> to one (1) and providing the certificate name and location enables data encryption.</p>
      
      <codeblock>
curl –X POST  -u Admin:myPassword
    https://localHost:sslPort/pools/default/remoteClusters
    -d demandEncryption=[0|1] --data-urlencode "certificate=$(cat remoteCert.pem)"
      </codeblock>
      
    </section>
    
    <example><title>Creating an encrypted client-server connection</title>
      <codeblock>curl –X POST
    https://Administrator:asdasd@192.168.0.1:18091/pools/default/remoteClusters/
    -d demandEncryption=1 --data-urlencode "certificate=$(cat remoteCert.pem)"     </codeblock>
    </example>
    
    
    
  </body>
</topic>
