<?xml version="1.0" encoding="utf-8"?><?workdir /Users/Ruth/forks/docs-ng/dita/src/ag3/temp/pdf/ag3/Views?><?workdir-uri file:/Users/Ruth/forks/docs-ng/dita/src/ag3/temp/pdf/ag3/Views/?><?path2project ../?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xml:lang="en-us" id="topic25783" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " class="- topic/topic " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="topic:1;4:41">
  <title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:1;5:10">View and query pattern samples</title>
  <body class="- topic/body " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="body:1;6:9">
    <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:1;7:8">Building views and querying the indexes they generate is a combined process based both on the
      document structure and the view definition. Writing an effective view to query your data may
      require changing or altering your document structure, or creating a more complex view in order
      to allow the specific selection of the data through the querying mechanism.</p>
    <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:2;11:8">For background and examples, the following selections provide a number of different scenarios
      and examples have been built to demonstrate the document structures, views and querying
      parameters required for different situations.</p>
    
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:1;18:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:2;18:21">General advice</title><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:3;18:46">There are some general points and advice for writing
        all views that apply irrespective of the document structure, query format, or view
        content.</p><ul class="- topic/ul " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ul:1;20:25">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:1;21:13">Do not assume the field will exist in all documents.</li>
      </ul><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:4;22:15">Fields may be missing from your document, or may only be supported in specific
        document types. Use an <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:1;23:40">if</codeph> test to identify problems. For example:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:1;23:106"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:2;23:114">```
if (document.firstname)...
```
</codeph></codeblock><ul class="- topic/ul " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ul:2;26:26">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:2;27:13">View output is case sensitive.</li>
      </ul><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:5;28:15">The value emitted by the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:3;28:48">emit()</codeph> function is case sensitive. Emitting
        a field value of ‘Martin’ but specifying a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:4;29:60">key</codeph> value of ‘martin’ will not
        match the data. Emitted data, and the key selection values, should be normalized to
        eliminate potential problems. For example:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:2;31:66"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:5;31:74">```
emit(doc.firstname.toLowerCase(),null);
```
</codeph></codeblock><ul class="- topic/ul " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ul:3;34:26">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:3;35:13">Number formatting</li>
      </ul><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:6;36:15">Numbers within JavaScript may inadvertently be converted and output as strings. To
        ensure that data is correctly formatted, the value should be explicitly converted. For
        example:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:3;38:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:6;38:40">```
emit(parseInt(doc.value,10),null);
```
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:7;41:25">The
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:7;42:19">parseInt()</codeph> built-in function will convert a supplied value to an integer.
        The <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:8;43:21">parseFloat()</codeph> function can be used for floating-point
        numbers.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:2;48:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:3;48:21">Validating document type</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:8;49:10">If your dataset includes documents that may
        be either JSON or binary, then you do not want to create a view that outputs individual
        fields for non-JSON documents. You can fix this by using a view that checks the metadata
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:9;52:19">type</codeph> field before outputting the JSON view
        information:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:4;53:36"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:10;53:44">function(doc,meta) {
    if (meta.type == "json") {
        emit(doc.firstname.toLowerCase(),null);
    }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:9;58:25">In
        the above example, the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:11;59:40">emit()</codeph> function will only be called on a valid JSON
        document. Non-JSON documents will be ignored and not included in the view
        output.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:3;65:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:4;65:21">Document ID (primary) index</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:10;66:10">To create a ‘primary key’ index, i.e. an
        index that contains a list of every document within the database, with the document ID as
        the key, you can create a simple
        view:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:5;69:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:12;69:37">function(doc,meta)
{
  emit(meta.id,null);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:11;73:25">This
        enables you to iterate over the documents stored in the database.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:12;74:81">This will provide
        you with a view that outputs the document ID of every document in the bucket using the
        document ID as the key.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:13;76:39">The view can be useful for obtaining groups or ranges of
        documents based on the document ID, for example to get documents with a specific ID
        prefix:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:6;78:31"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:13;78:39">?startkey="object"&amp;endkey="object\u0000"
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:14;79:25">Or
        to obtain a list of objects within a given
        range:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:7;81:30"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:14;81:38">?startkey="object100"&amp;endkey="object199"
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:15;82:25">For
        all views, the document ID is automatically included as part of the view response. But the
        without including the document ID within the key emitted by the view, it cannot be used as a
        search or querying
        mechanism.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:4;90:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:5;90:21">Secondary index</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:16;91:10">The simplest form of view is to create an index
        against a single field from the documents stored in your database.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:17;92:82">For example, given
        the document
        structure:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:8;94:34"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:15;94:42">{
    "firstname": "Martin",
    "lastname": "Brown"
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:18;98:25">A
        view to support queries on the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:16;99:48">firstname</codeph> field could be defined as
        follows:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:9;100:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:17;100:40">function(doc, meta)
{
  if (doc.firstname)
  {
     emit(doc.firstname.toLowerCase(),null);
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:19;107:25">The
        view works as follows for each document:</p><ul class="- topic/ul " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ul:4;108:57">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:4;109:13"><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:20;109:16">Only outputs a record if the document contains a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:18;109:73">firstname</codeph>
            field.</p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:5;111:13"><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:21;111:16">Converts the content of the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:19;111:52">firstname</codeph> field to lowercase.</p></li>
      </ul><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:22;112:15">Queries can now be specified by supplying a string converted to lowercase. For
        example:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:10;113:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:20;113:40">?key="martin"
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:23;114:25">Will return all
        documents where the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:21;115:37">firstname</codeph> field contains ‘Martin’, regardless of the
        document field
        capitalization.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:5;121:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:6;121:21">Using expiration metadata</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:24;122:10">The metadata object makes it very easy to
        create and update different views on your data using information outside of the main
        document data. For example, you can use the expiration field within a view to get the list
        of recently active sessions in a system.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:25;125:56">Using the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:22;125:84">map()</codeph>
        function, which uses the expiration as part of the emitted
        data.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:11;127:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:23;127:37">function(doc, meta)
{
  if (doc.type &amp;&amp; doc.type == "session")
  {
    emit(meta.expiration, doc.nickname)
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:26;134:25">If
        you have sessions which are saved with a TTL, this will allow you to give a view of who was
        recently active on the
        service.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:6;141:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:7;141:21">Emitting multiple rows</title><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:27;141:54">The <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:24;141:66">emit()</codeph> function is used to
        create a record of information for the view during the map phase, but it can be called
        multiple times within that map phase to allowing querying over more than one source of
        information from each stored document.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:28;144:54">An example of this is when the source documents
        contain an array of information. For example, within a recipe document, the list of
        ingredients is exposed as an array of objects. By iterating over the ingredients, an index
        of ingredients can be created and then used to find recipes by
        ingredient.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:12;148:35"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:25;148:43">{
    "title": "Fried chilli potatoes",
    "preptime": "5"
    "servings": "4",
    "totaltime": "10",
    "subtitle": "A new way with chips.",
    "cooktime": "5",
    "ingredients": [
        {
            "ingredtext": "chilli powder",
            "ingredient": "chilli powder",
            "meastext": "3-6 tsp"
        },
        {
            "ingredtext": "potatoes, peeled and cut into wedges",
            "ingredient": "potatoes",
            "meastext": "900 g"
        },
        {
            "ingredtext": "vegetable oil for deep frying",
            "ingredient": "vegetable oil for deep frying",
            "meastext": ""
        }
    ],
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:29;173:25">The
        view can be created using the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:26;174:57">map()</codeph>
        function:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:13;175:33"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:27;175:41">function(doc, meta)
{
  if (doc.ingredients)
  {
    for (i=0; i &lt; doc.ingredients.length; i++)
    {
        emit(doc.ingredients[i].ingredient, null);
    }
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:30;185:25">To
        query for a specific ingredient, specify the ingredient as a
        key:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:14;187:28"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:28;187:36">?key="carrot"
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:31;188:25">The <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:29;188:37">keys</codeph>
        parameter can also be used in this situation to look for recipes that contain multiple
        ingredients. For example, to look for recipes that contain either “potatoes” or “chilli
        powder” you would
        use:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:15;192:28"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:30;192:36">?keys=["potatoes","chilli powder"]
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:32;193:25">This
        will produce a list of any document containing either ingredient. A simple count of the
        document IDs by the client can determine which recipes contain all three.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:33;195:89">The output
        can also be combined. For example, to look for recipes that contain carrots and can be
        cooked in less than 20 minutes, the view can be rewritten
        as:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:16;198:27"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:31;198:35">function(doc, meta)
{
  if (doc.ingredients)
  {
    for (i=0; i &lt; doc.ingredients.length; i++)
    {
      if (doc.ingredients[i].ingredtext &amp;amp;&amp;amp; doc.totaltime)
      {
        emit([doc.ingredients[i].ingredtext, parseInt(doc.totaltime,10)], null);
      }
    }
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:34;211:25">In
        this map function, an array is output that generates both the ingredient name, and the total
        cooking time for the recipe. To perform the original query, carrot recipes requiring less
        than 20 minutes to
        cook:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:17;215:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:32;215:37">?startkey=["carrot",0]&amp;endkey=["carrot",20]
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:35;216:25">This
        generates the following
        view:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:18;218:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:33;218:37">{"total_rows":26471,"rows":[
{"id":"Mangoandcarrotsmoothie","key":["carrots",5],"value":null},
{"id":"Cheeseandapplecoleslaw","key":["carrots",15],"value":null}
]
}
</codeph></codeblock></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:7;227:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:8;227:21">Date and time selection</title><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:36;227:55">For date and time selection, consideration
        must be given to how the data will need to be selected when retrieving the information. This
        is particularly true when you want to perform log roll-up or statistical collection by using
        a reduce function to count or quantify instances of a particular event over
        time.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:37;231:21">Examples of this in action include querying data over a specific range, on
        specific day or date combinations, or specific time periods. Within a traditional relational
        database it is possible to perform an extraction of a specific date or date range by storing
        the information in the table as a date type.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:38;234:60">Within a map/reduce, the effect can be
        simulated by exposing the date into the individual components at the level of detail that
        you require. For example, to obtain a report that counts individual log types over a period
        identifiable to individual days, you can use the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:34;237:76">map()</codeph>
        function:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:19;238:33"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:35;238:41">function(doc, meta) {
    emit([doc.year, doc.mon, doc.day, doc.logtype], null);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:39;241:25">By
        incorporating the full date into the key, the view provides the ability to search for
        specific dates and specific ranges. By modifying the view content you can simplify this
        process further. For example, if only searches by year/month are required for a specific
        application, the day can be omitted.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:40;245:52">And with the corresponding
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:36;246:19">reduce()</codeph> built-in of <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:37;246:57">_count</codeph>, you can perform a number of
        different queries. Without any form of data selection, for example, you can use the
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:38;248:19">group_level</codeph> parameter to summarize down as far as individual day, month,
        and year. Additionally, because the date is explicitly output, information can be selected
        over a specific range, such as a specific
        month:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:20;251:30"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:39;251:38">endkey=[2010,9,30]&amp;group_level=4&amp;startkey=[2010,9,0]
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:41;252:25">Here
        the explicit date has been specified as the start and end key. The
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:40;254:19">group_level</codeph> is required to specify roll-up by the date and log
        type.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:42;255:21">This will generate information similar to
        this:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:21;256:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:41;256:37">{"rows":[
{"key":[2010,9,1,"error"],"value":5},
{"key":[2010,9,1,"warning"],"value":10},
{"key":[2010,9,2,"error"],"value":8},
{"key":[2010,9,2,"warning"],"value":9},
{"key":[2010,9,3,"error"],"value":16},
{"key":[2010,9,3,"warning"],"value":8},
{"key":[2010,9,4,"error"],"value":15},
{"key":[2010,9,4,"warning"],"value":11},
{"key":[2010,9,5,"error"],"value":6},
{"key":[2010,9,5,"warning"],"value":12}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:43;269:25">Additional
        granularity, for example down to minutes or seconds, can be achieved by adding those as
        further arguments to the map
        function:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:22;272:33"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:42;272:41">function(doc, meta)
{
    emit([doc.year, doc.mon, doc.day, doc.hour, doc.min, doc.logtype], null);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:44;276:25">The
        same trick can also be used to output based on other criteria. For example, by day of the
        week, week number of the year or even by
        period:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:23;279:31"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:43;279:39">function(doc, meta) {
  if (doc.mon)
  {
    var quarter = parseInt((doc.mon - 1)/3,10)+1;

    emit([doc.year, quarter, doc.logtype], null);
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:45;287:25">To
        get more complex information, for example a count of individual log types for a given date,
        you can combine the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:44;289:37">map()</codeph> and <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:45;289:64">reduce()</codeph> stages to provide
        the collation.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:46;290:30">For example, by using the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:46;290:74">map()</codeph> function we
        can output and collate by day, month, or year as before, and with data selection at the date
        level.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:24;292:30"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:47;292:38">function(doc, meta) {
    emit([doc.year, doc.mon, doc.day], doc.logtype);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:47;295:25">For
        convenience, you may wish to use the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:48;296:54">dateToArray()</codeph> function, which converts
        a date object or string into an array. For example, if the date has been stored within the
        document as a single
        field:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:25;299:30"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:49;299:38">function(doc, meta) {
    emit(dateToArray(doc.date), doc.logtype);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:48;302:25">For
        more information, see <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:50;303:39">dateToArray()</codeph>.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:49;303:69">Using the following
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:51;304:19">reduce()</codeph> function, data can be collated for each individual logtype for
        each day within a single record of
        output.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:26;306:31"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:52;306:39">function(key, values, rereduce)
{
  var response = {"warning" : 0, "error": 0, "fatal" : 0 };
  for(i=0; i&lt;values.length; i++)
  {
    if (rereduce)
    {
      response.warning = response.warning + values[i].warning;
      response.error = response.error + values[i].error;
      response.fatal = response.fatal + values[i].fatal;
    }
    else
    {
      if (values[i] == "warning")
      {
        response.warning++;
      }
      if (values[i] == "error" )
      {
        response.error++;
      }
      if (values[i] == "fatal" )
      {
        response.fatal++;
      }
    }
  }
  return response;
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:50;335:25">When
        queried using a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:53;336:33">group_level</codeph> of two (by month), the following output is
        produced:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:27;337:33"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:54;337:41">{"rows":[
{"key":[2010,7], "value":{"warning":4,"error":2,"fatal":0}},
{"key":[2010,8], "value":{"warning":4,"error":3,"fatal":0}},
{"key":[2010,9], "value":{"warning":4,"error":6,"fatal":0}},
{"key":[2010,10],"value":{"warning":7,"error":6,"fatal":0}},
{"key":[2010,11],"value":{"warning":5,"error":8,"fatal":0}},
{"key":[2010,12],"value":{"warning":2,"error":2,"fatal":0}},
{"key":[2011,1], "value":{"warning":5,"error":1,"fatal":0}},
{"key":[2011,2], "value":{"warning":3,"error":5,"fatal":0}},
{"key":[2011,3], "value":{"warning":4,"error":4,"fatal":0}},
{"key":[2011,4], "value":{"warning":3,"error":6,"fatal":0}}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:51;350:25">The
        input includes a count for each of the error types for each month. Note that because the key
        output includes the year, month and date, the view also supports explicit querying while
        still supporting grouping and roll-up across the specified group. For example, to show
        information from 15th November 2010 to 30th April 2011 using the following
        query:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:28;355:30"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:55;355:38">?endkey=[2011,4,30]&amp;group_level=2&amp;startkey=[2010,11,15]
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:52;356:25">Which
        generates the following
        output:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:29;358:31"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:56;358:39">{"rows":[
{"key":[2010,11],"value":{"warning":1,"error":8,"fatal":0}},
{"key":[2010,12],"value":{"warning":3,"error":4,"fatal":0}},
{"key":[2011,1],"value":{"warning":8,"error":2,"fatal":0}},
{"key":[2011,2],"value":{"warning":4,"error":7,"fatal":0}},
{"key":[2011,3],"value":{"warning":4,"error":4,"fatal":0}},
{"key":[2011,4],"value":{"warning":5,"error":7,"fatal":0}}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:53;367:25">Keep
        in mind that you can create multiple views to provide different views and queries on your
        document data. In the above example, you could create individual views for the limited
        datatypes of logtype to create a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:57;370:50">warningsbydate</codeph>
        view.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:8;375:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:9;375:21">Selective record output</title><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:54;375:55">If you are storing different document types
        within the same bucket, then you may want to ensure that you generate views only on a
        specific record type within the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:58;377:49">map()</codeph> phase. This can be achieved by using
        an <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:59;378:20">if</codeph> statement to select the record.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:55;378:70">For example, if you are storing
        blog ‘posts’ and ‘comments’ within the same bucket, then a view on the blog posts could be
        created using the following
        map:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:30;381:28"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:60;381:36">function(doc, meta) {
    if (doc.title &amp;&amp; doc.type &amp;&amp; doc.date &amp;&amp;
        doc.author &amp;&amp; doc.type == 'post')
    {
        emit(doc.title, [doc.date, doc.author]);
    }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:56;388:25">The
        same solution can also be used if you want to create a view over a specific range or value
        of documents while still allowing specific querying structures. For example, to filter all
        the records from the statistics logging system over a date range that are of the type error
        you could use the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:61;392:45">map()</codeph>
        function:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:31;393:33"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:62;393:41">function(doc, meta) {
    if (doc.logtype == 'error')
    {
       emit([doc.year, doc.mon, doc.day],null);
    }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:57;399:25">The
        same solution can also be used for specific complex query types. For example, all the
        recipes that can be cooked in under 30 minutes, made with a specific
        ingredient:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:32;402:35"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:63;402:43">function(doc, meta)
{
  if (doc.totaltime &amp;amp;&amp;amp; doc.totaltime &lt;= 20)
  {
    if (doc.ingredients) {
      for (i=0; i &lt; doc.ingredients.length; i++)
      {
        if (doc.ingredients[i].ingredtext)
        {
          emit(doc.ingredients[i].ingredtext, null);
        }
      }
    }
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:58;417:25">The
        above function allows for much quicker and simpler selection of recipes by using a query and
        the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:64;419:21">key</codeph> parameter, instead of having to work out the range that may be
        required to select recipes when the cooking time and ingredients are generated by the
        view.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:59;421:21">These selections are application specific, but by producing different views for
        a range of appropriate values, for example 30, 60, or 90 minutes, recipe selection can be
        much easier at the expense of updating additional view
        indexes.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:9;428:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:10;428:21">Sorting on reduce values</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:60;429:10">The sorting algorithm within the view system
        outputs information ordered by the generated key within the view, and therefore it operates
        before any reduction takes place. Unfortunately, it is not possible to sort the output order
        of the view on computed reduce values, as there is no post-processing on the generated view
        information.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:61;433:28">To sort based on reduce values, you must access the view content with
        reduction enabled from a client, and perform the sorting within the client
        application.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:10;439:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:11;439:21">Solutions for simulating joins</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:62;440:10">Joins between data, even when the
        documents being examined are contained within the same bucket, are not possible directly
        within the view system. However, you can simulate this by making use of a common field used
        for linking when outputting the view information. For example, consider a blog post system
        that supports two different record types, ‘blogpost’ and ‘blogcomment’. The basic format for
        ‘blogpost’
        is:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:33;446:27"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:65;446:35">{
    "type" : "post",
    "title" : "Blog post"
    "categories" : [...],
    "author" : "Blog author"
    ...
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:63;453:25">The
        corresponding comment record includes the blog post ID within the document
        structure:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:34;455:34"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:66;455:42">{
    "type" : "comment",
    "post_id" : "post_3454"
    "author" : "Comment author",
    "created_at" : 123498235
...
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:64;462:25">To
        output a blog post and all the comment records that relate to the blog post, you can use the
        following
        view:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:35;465:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:67;465:37">function(doc, meta)
{
    if (doc.post_id &amp;&amp; doc.type &amp;&amp; doc.type == "post")
    {
        emit([doc.post_id, null], null);
    }
    else if (doc.post_id &amp;&amp; doc.created_at &amp;&amp; doc.type &amp;&amp; doc.type == "comment")
    {
        emit([doc.post_id, doc.created_at], null);
    }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:65;476:25">The
        view makes use of the sorting algorithm when using arrays as the view key. For a blog post
        record, the document ID will be output will a null second value in the array, and the blog
        post record will therefore appear first in the sorted output from the view. For a comment
        record, the first value will be the blog post ID, which will cause it to be sorted in line
        with the corresponding parent post record, while the second value of the array is the date
        the comment was created, allowing sorting of the child comments.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:66;482:80">For
        example:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:36;483:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:68;483:40">{"rows":[
{"key":["post_219",null],       "value":{...}},
{"key":["post_219",1239875435],"value":{...}},
{"key":["post_219",1239875467],"value":{...}},
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:67;489:25">Another
        alternative is to make use of a multi-get operation within your client through the main
        Couchbase SDK interface, which should load the data from cache. This allows you to structure
        your data with the blog post containing an array of the of the child comment records. For
        example, the blog post structure might
        be:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:37;494:27"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:69;494:35">{
    "type" : "post",
    "title" : "Blog post"
    "categories" : [...],
    "author" : "Blog author",
    "comments": ["comment_2298","comment_457","comment_4857"],
    ...
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:68;502:25">To
        obtain the blog post information and the corresponding comments, create a view to find the
        blog post record, and then make a second call within your client SDK to get all the comment
        records from the Couchbase Server
        cache.</p></section>
    
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:11;510:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:12;510:21">Simulating transactions</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:69;511:10">Couchbase Server does not support
        transactions, but the effect can be simulated by writing a suitable document and view
        definition that produces the effect while still only requiring a single document update to
        be applied.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:70;514:27">For example, consider a typical banking application, the document
        structure could be as
        follows:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:38;516:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:70;516:40">{
   "account" : "James",
   "value" : 100
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:71;520:25">A
        corresponding record for another
        account:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:39;522:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:71;522:40">{
   "account" : "Alice",
   "value" : 200
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:72;526:25">To
        get the balance of each account, the following <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:72;527:64">map()</codeph>
        :</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:40;528:25"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:73;528:33">function(doc, meta) {
    if (doc.account &amp;&amp; doc.value)
    {
      emit(doc.account,doc.value);
    }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:73;534:25">The
          <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:74;535:19">reduce()</codeph> function can use the built-in <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:75;535:75">_sum</codeph>
        function.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:74;536:25">When queried, using a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:76;536:55">group_level</codeph> of 1, the balance of the
        accounts is
        displayed:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:41;538:34"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:77;538:42">{"rows":[
{"key":"Alice","value":200},
{"key":"James","value":100}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:75;543:25">Money
        in an account can be updated just by adding another record into the system with the account
        name and value. For example, adding the
        record:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:42;546:31"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:78;546:39">{
   "account" : "James",
   "value" : 50
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:76;550:25">Re-querying
        the view produces an updated balance for each
        account:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:43;552:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:79;552:40">{"rows":[
{"key":"Alice","value":200},
{"key":"James","value":150}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:77;557:25">However,
        if Alice wants to transfer $100 to James, two record updates are required:</p><ol class="- topic/ol " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ol:1;558:91">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:6;559:13"><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:78;559:16">A record that records an update to Alice’s account to reduce the value by
          100.</p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:7;561:13"><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:79;561:16">A record that records an update to James’s account to increase the value by
          100.</p></li>
      </ol><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:80;563:15">Unfortunately, the integrity of the transaction could be compromised in the event of a
        problem between step 1 and step 2. Alice’s account may be deducted, without updates James’
        record.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:81;565:23">To simulate this operation while creating (or updating) only one record, a
        combination of a transaction record and a view must be used. The transaction record looks
        like
        this:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:44;568:29"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:80;568:37">{
     "fromacct" : "Alice",
     "toacct" : "James",
     "value" : 100
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:82;573:25">The
        above records the movement of money from one account to another. The view can now be updated
        to handle a transaction record and output a row through <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:81;575:73">emit()</codeph> to update
        the value for each
        account.</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:45;577:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:82;577:40">function(doc, meta)
{
  if (doc.fromacct)
  {
    emit(doc.fromacct, -doc.value);
    emit(doc.toacct, doc.value);
  }
  else
  {
    emit(doc.account, doc.value);
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:83;589:25">The
        above <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:83;590:23">map()</codeph> effectively generates two fake rows, one row subtracts the
        amount from the source account, and adds the amount to the destination account. The
        resulting view then uses the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:84;592:46">reduce()</codeph> function to sum up the transaction
        records for each account to arrive at a final
        balance:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:46;594:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:85;594:40">{"rows":[
{"key":"Alice","value":100},
{"key":"James","value":250}
]
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:84;599:25">Throughout
        the process, only one record has been created, and therefore transient problems with that
        record update can be captured without corrupting or upsetting the existing stored
        data.</p></section>
    
    
    <section class="- topic/section " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="section:12;605:14"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="title:13;605:21">Simulating multi-phase transactions</title>
      <p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:85;606:10">The technique in Simulating
          Transactions works if your data will allow the use of a view to effectively
        roll-up the changes into a single operation. However, if your data and document structure do
        not allow it then you can use a multi-phase transaction process to perform the operation in
        a number of distinct stages.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:86;610:44">This method is not reliant on views, but the document
        structure and update make it easy to find out if there are ‘hanging’ or trailing
        transactions that need to be processed without additional document updates. Using views and
        the Observe operation to monitor changes could lead to long wait times during the
        transaction process while the view index is updated.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:87;614:68">To employ this method, you use a
        similar transaction record as in the previous example, but use the transaction record to
        record each stage of the update process.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:88;616:56">Start with the same two account
        records:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:47;617:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:86;617:40">{
   "type" : "account",
   "account" : "James",
   "value" : 100,
   "transactions" : []
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:89;623:25">The
        record explicitly contains a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:87;624:46">transactions</codeph> field which contains an array of
        all the currently active transactions on this record.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:90;625:69">The corresponding record for the
        other
        account:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeblock:48;627:32"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:88;627:40">{
   "type" : "account",
   "account" : "Alice",
   "value" : 200,
   "transactions" : []
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:91;633:25">Now
        perform the following operations in sequence:</p><ol class="- topic/ol " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="ol:2;634:62">
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:8;635:13">Create a new transaction record that records the transaction information:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:92;635:89"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:89;635:97"> {
              "type" : "transaction", "fromacct" : "Alice", "toacct" : "James", "value" : 100,
              "status" : "waiting" } </codeph></p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:93;637:54">The core of the transaction record is the same,
            the difference is the use of a <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:90;638:52">status</codeph> field which will be used to
            monitor the progress of the transaction.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:94;639:60">Record the ID of the transaction, for
            example, <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:91;640:30">transact_20120717163</codeph>.</p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:9;641:13">Set the value of the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:92;641:42">status</codeph> field in the transaction document to
              ‘pending’:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:95;642:28"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:93;642:36"> { "type" : "transaction", "fromacct" : "Alice", "toacct" :
              "James", "value" : 100, "status" : "pending" } </codeph></p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:10;644:13">Find all transaction records in the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:94;644:57">pending</codeph> state using a suitable
              view:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:96;645:23"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:95;645:31"> function(doc, meta) { if (doc.type &amp;&amp; doc.status &amp;&amp;
              doc.type == "transaction" &amp;&amp; doc.status == "pending" ) {
              emit([doc.fromacct,doc.toacct], doc.value); } } </codeph></p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:11;648:13">Update the record identified in <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:96;648:53">toacct</codeph> with the transaction
          information, ensuring that the transaction is not already pending:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:97;649:80"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:97;649:88"> { "type" :
              "account", "account" : "Alice", "value" : 100, "transactions" :
              ["transact_20120717163"] } </codeph></p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:98;651:58">Repeat on the other account:</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:99;651:93"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:98;651:101">
              { "type" : "account", "account" : "James", "value" : 200, "transactions" :
              ["transact_20120717163"] } </codeph></p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:12;654:13">Update the transaction record to mark that the records have been updated:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:100;654:89"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:99;654:97"> {
              "type" : "transaction", "fromacct" : "Alice", "toacct" : "James", "value" : 100,
              "status" : "committed" } </codeph></p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:13;657:13">Find all transaction records in the <codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:100;657:57">committed</codeph> state using a suitable
              view:<p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:101;658:23"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:101;658:31"> function(doc, meta) { if (doc.type &amp;&amp; doc.status &amp;&amp;
              doc.type == "transaction" &amp;&amp; doc.status == "committed" ) { emit([doc.fromacct,
              doc.toacct], doc.value); } } </codeph></p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:102;660:60">Update the source account record noted in
            the transaction and remove the transaction ID:</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:103;661:66"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:102;661:74"> { "type" : "account",
              "account" : "Alice", "value" : 100, "transactions" : [] } </codeph></p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:104;662:89">Repeat on
            the other account:</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:105;663:38"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="codeph:103;663:46"> { "type" : "account", "account" : "James", "value" :
              200, "transactions" : [] } </codeph></p></li>
        <li class="- topic/li " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="li:14;665:13">Update the transaction record state to ‘done’. This will remove the transaction from the
          two views used to identify unapplied, or uncommitted transactions.</li>
      </ol><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:106;667:15">Within this process, although there are multiple steps required, you can identify at
        each step whether a particular operation has taken place or not.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:107;668:80">For example, if the
        transaction record is marked as ‘pending’, but the corresponding account records do not
        contain the transaction ID, then the record still needs to be updated. Since the account
        record can be updated using a single atomic operation, it is easy to determine if the record
        has been updated or not.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-querySample.dita" xtrc="p:108;672:40">The result is that any sweep process that accesses the views
        defined in each step can determine whether the record needs updating. Equally, if an
        operation fails, a record of the transaction, and whether the update operation has been
        applied, also exists, allowing the changes to be reversed and backed out.</p></section>
  </body>
<related-links class="- topic/related-links "><linkpool class="- topic/linkpool " xtrc="topicref:112;129:50" xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Admin.ditamap"><link class="- topic/link " mapclass="- map/topicref " type="topic" xtrc="topicref:103;120:42" xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Admin.ditamap" href="../Views/views-intro.dita" role="parent"><?ditaot usertext?><linktext class="- topic/linktext "><?ditaot gentext?>Views and indexes</linktext></link></linkpool></related-links>
</topic>