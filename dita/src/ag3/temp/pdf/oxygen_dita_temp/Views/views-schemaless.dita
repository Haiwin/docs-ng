<?xml version="1.0" encoding="utf-8"?><?workdir /Users/Ruth/forks/docs-ng/dita/src/ag3/temp/pdf/oxygen_dita_temp/Views?><?workdir-uri file:/Users/Ruth/forks/docs-ng/dita/src/ag3/temp/pdf/oxygen_dita_temp/Views/?><?path2project ../?><topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xml:lang="en-us" id="topic1678" ditaarch:DITAArchVersion="1.2" domains="(topic hi-d)                             (topic ut-d)                             (topic indexing-d)                            (topic hazard-d)                            (topic abbrev-d)                            (topic pr-d)                             (topic sw-d)                            (topic ui-d)    " class="- topic/topic " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="topic:1;4:40"><title class="- topic/title " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="title:1;4:47">Views in a schema-less database</title><body class="- topic/body " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="body:1;4:92"><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:1;4:95">One of the primary advantages of the document-based storage and the use of
map/reduce views for querying the data is that the structure of the stored
documents does not need to be predeclared, or even consistent across multiple
documents.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:2;7:18">Instead, the view can cope with and determine the structure of the incoming
documents that are stored in the database, and the view can then reformat and
restructure this data during the map/reduce stage. This simplifies the storage
of information, both in the initial format, and over time, as the format and
structure of the documents can change over time.</p><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:3;11:56">For example, you could start storing name information using the following JSON
structure:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeblock:1;12:26"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeph:1;12:34">{
   "email" : "mc@example.org",
   "name" : "Martin Brown"
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:4;16:25">A view can be defined that outputs the email and name:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeblock:2;16:94"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeph:2;16:102">function(doc, meta)
{
    emit([doc.name, doc.email], null);
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:5;20:25">This generates an index containing the name and email information. Over time,
the application is adjusted to store the first and last names separately:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeblock:3;21:89"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeph:3;21:97">{
   "email" : "mc@example.org",
   "firstname" : "Martin",
   "lastname" : "Brown"
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:6;26:25">The view can be modified to cope with both the older and newer document types,
while still emitting a consistent view:</p><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeblock:4;27:55"><codeph class="+ topic/ph pr-d/codeph " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="codeph:4;27:63">function(doc, meta)
{
  if (doc.name &amp;&amp; (doc.name != null))
  {
    emit([doc.name, doc.email], null);
  }
  else
  {
    emit([doc.firstname + " " + doc.lastname, doc.email], null);
  }
}
</codeph></codeblock><p class="- topic/p " xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Views/views-schemaless.dita" xtrc="p:7;38:25">The schema-less nature and view definitions allows for a flexible document
structure, and an evolving one, without requiring either an initial schema
description, or explicit schema updates when the format of the information
changes.</p></body><related-links class="- topic/related-links "><linkpool class="- topic/linkpool " xtrc="topicref:110;127:49" xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Admin.ditamap"><link class="- topic/link " mapclass="- map/topicref " type="topic" xtrc="topicref:103;120:42" xtrf="/Users/Ruth/forks/docs-ng/dita/src/ag3/Admin.ditamap" href="../Views/views-intro.dita" role="parent"><?ditaot usertext?><linktext class="- topic/linktext "><?ditaot gentext?>Views and indexes</linktext></link></linkpool></related-links>
</topic>