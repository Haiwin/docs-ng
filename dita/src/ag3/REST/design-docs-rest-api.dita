<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic8715">
	<title>Managing design documents</title>
	<shortdesc>Design documents are used to store one or more view definitions. Views can be defined
		within a design document and uploaded to the server through the REST API.</shortdesc>
	
	<body>
		
		<section><title>Storing design documents</title><p>To create a new design document with one
				or more views, you can upload the corresponding design document using the REST API
				with the definition in place. The format of this command is as shown in the table
				below:</p><table>
				<tgroup cols="2">
					<colspec colname="col1"/>
					<colspec colname="col2"/>
					<thead>
						<row>
							<entry>Put Design Document</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><b>Method</b></entry>
							<entry><codeph>PUT /bucket/_design/design-doc</codeph></entry>
						</row>
						<row>
							<entry><b>Request Data</b></entry>
							<entry>Design document definition (JSON)</entry>
						</row>
						<row>
							<entry><b>Response Data</b></entry>
							<entry>Success and stored design document ID</entry>
						</row>
						<row>
							<entry><b>Authentication Required</b></entry>
							<entry>optional</entry>
						</row>
						<row>
							<entry><b>Return Codes</b></entry>
						</row>
						<row>
							<entry>201</entry>
							<entry>Document created successfully.</entry>
						</row>
						<row>
							<entry>401</entry>
							<entry>The item requested was not available using the supplied
								authorization, or authorization was not supplied.</entry>
						</row>
					</tbody>
				</tgroup>
			</table><p>When creating a design document through the REST API, we recommend that you
				create a development ( <codeph>dev</codeph> ) view. We recommend that you create a
				dev design document and views first, and then check the output of the configured
				views in your design document. To create a dev view you <i>must</i> explicitly use
				the <codeph>dev_</codeph> prefix for the design document name.</p><p>For example,
				using <codeph>curl</codeph>, you can create a design document,
					<codeph>byfield</codeph>, by creating a text file (with the name
					<codeph>byfield.ddoc</codeph> ) with the design document content using the
				following
				command:</p><codeblock><codeph>&gt; curl -X PUT -H 'Content-Type: application/json' \
   http://user:password@localhost:8092/sales/_design/dev_byfield' \
   -d @byfield.ddoc
</codeph></codeblock><p>In
				the above example:</p><ul>
				<li><codeph>-X PUT</codeph></li>
			</ul><p>Indicates that an HTTP PUT operation is requested.</p><ul>
				<li><codeph>-H 'Content-Type: application/json'</codeph></li>
			</ul><p>Specifies the HTTP header information. Couchbase Server requires the information
				to be sent and identified as the <codeph>application/json</codeph> datatype.
				Information not supplied with the content-type set in this manner will be
				rejected.</p><ul>
				<li><codeph>http://user:password@localhost:8092/sales/_design/dev_byfield'</codeph></li>
			</ul><p>The URL, including authentication information, of the bucket where you want the
				design document uploaded. The <codeph>user</codeph> and <codeph>password</codeph>
				should either be the Administration privileges, or for SASL protected buckets, the
				bucket name and bucket password. If the bucket does not have a password, then the
				authentication information is not required.</p><p>The view being accessed in this
				case is a development view. To create a development view, you <i>must</i> use the
					<codeph>dev_</codeph> prefix to the view name.</p><p>As a <codeph>PUT</codeph>
				command, the URL is also significant, in that the location designates the name of
				the design document. In the example, the URL includes the name of the bucket (
					<codeph>sales</codeph> ) and the name of the design document that will be
				created <codeph>dev_byfield</codeph>.</p><ul>
				<li><codeph>-d @byfield.ddoc</codeph></li>
			</ul><p>Specifies that the data payload should be loaded from the file
					<codeph>byfield.ddoc</codeph>.</p><p>If successful, the HTTP response code will
				be 201 (created). The returned JSON will contain the field <codeph>ok</codeph> and
				the ID of the design document
				created:</p><codeblock><codeph>{
    "ok":true,
    "id":"_design/dev_byfield"
}
</codeph></codeblock><p>The
				design document will be validated before it is created or updated in the system. The
				validation checks for valid JavaScript and for the use of valid built-in reduce
				functions. Any validation failure is reported as an error.</p><p>In the event of an
				error, the returned JSON will include the field <codeph>error</codeph> with a short
				description, and the field <codeph>reason</codeph> with a longer description of the
				problem.</p><p>The format of the design document should include all the views
				defined in the design document, incorporating both the map and reduce functions for
				each named view. For
				example:</p><codeblock><codeph>{"views":{"byloc":{"map":"function (doc, meta) {\n  if (meta.type == \"json\") {\n    emit(doc.city, doc.sales);\n  } else {\n    emit([\"blob\"]);\n  }\n}"}}}
</codeph></codeblock><p>Formatted,
				the design document looks like
				this:</p><codeblock><codeph>{
   "views" : {
      "byloc" : {
         "map" : "function (doc, meta) {\n  if (meta.type == \"json\") {\n    emit(doc.city, doc.sales);\n  } else {\n    emit([\"blob\"]);\n  }\n}"
      }
   }
}
</codeph></codeblock><p>The
				top-level <codeph>views</codeph> field lists one or more view definitions (the
					<codeph>byloc</codeph> view in this example), and for each view, a corresponding
					<codeph>map()</codeph> function.</p></section>
		<section><title>Retrieving design documents</title><p>To obtain an existing design document
				from a given bucket, you need to access the design document from the corresponding
				bucket using a <codeph>GET</codeph> request, as detailed in the table below.</p><table>
				<tgroup cols="2">
					<colspec colname="col1"/>
					<colspec colname="col2"/>
					<thead>
						<row>
							<entry>Get Design Document</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><b>Method</b></entry>
							<entry><codeph>GET /bucket/_design/design-doc</codeph></entry>
						</row>
						<row>
							<entry><b>Request Data</b></entry>
							<entry>Design document definition (JSON)</entry>
						</row>
						<row>
							<entry><b>Response Data</b></entry>
							<entry>Success and stored design document ID</entry>
						</row>
						<row>
							<entry><b>Authentication Required</b></entry>
							<entry>optional</entry>
						</row>
						<row>
							<entry><b>Return Codes</b></entry>
						</row>
						<row>
							<entry>200</entry>
							<entry>Request completed successfully.</entry>
						</row>
						<row>
							<entry>401</entry>
							<entry>The item requested was not available using the supplied
								authorization, or authorization was not supplied.</entry>
						</row>
						<row>
							<entry>404</entry>
							<entry>The requested content could not be found. The returned content
								will include further information, as a JSON object, if
								available.</entry>
						</row>
					</tbody>
				</tgroup>
			</table><p>To get back all the design documents with views defined on a bucket, the use
				following URI path with the GET request. In addition to get specific design
				documents back, the name of the design document can be specified to retrieve
				it.</p><codeblock><codeph>"ddocs": {
        "uri": "/pools/default/buckets/default/ddocs" // To obtain design docs for this bucket
    }
</codeph></codeblock><p>For
				example, to get the existing design document from the bucket <codeph>sales</codeph>
				for the design document <codeph>byfield</codeph>
				:</p><codeblock><codeph>&gt; curl -X GET \
    -H 'Content-Type: application/json' \
    'http://user:password@192.168.0.77:8092/sales/_design/dev_byfield
</codeph></codeblock><p>Through
					<codeph>curl</codeph> this will download the design document to the file
					<codeph>dev_byfield</codeph> filename.</p><p>If the bucket does not have a
				password, you can omit the authentication information. If the view does not exist
				you will get an
				error:</p><codeblock><codeph>{
   "error":"not_found",
   "reason":"missing"
}
</codeph></codeblock><p>The
				HTTP response header will include a JSON document containing the metadata about the
				design document being accessed. The information is returned within the
					<codeph>X-Couchbase-Meta</codeph> header of the returned data. You can obtain
				this information by using the <codeph>-v</codeph> option to the
					<codeph>curl</codeph>.</p><p>For
				example:</p><codeblock><codeph>&amp;gt; curl -v -X GET \
   -H 'Content-Type: application/json' \
   'http://user:password@192.168.0.77:8092/sales/_design/
* About to connect() to 192.168.0.77 port 8092 (#0)
*   Trying 192.168.0.77...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0* connected
* Connected to 192.168.0.77 (192.168.0.77) port 8092 (#0)
* Server auth using Basic with user 'Administrator'
&gt; GET /sales/_design/something HTTP/1.1
&gt; Authorization: Basic QWRtaW5pc3RyYXRvcjpUYW1zaW4=
&gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5
&gt; Host: 192.168.0.77:8092
&gt; Accept: */*
&gt; Content-Type: application/json
&gt;
&lt; HTTP/1.1 200 OK
&lt; X-Couchbase-Meta: {"id":"_design/dev_sample","rev":"5-2785ea87","type":"json"}
&lt; Server: MochiWeb/1.0 (Any of you quaids got a smint?)
&lt; Date: Mon, 13 Aug 2012 10:45:46 GMT
&lt; Content-Type: application/json
&lt; Content-Length: 159
&lt; Cache-Control: must-revalidate
&lt;
{ [data not shown]
100   159  100   159    0     0  41930      0 --:--:-- --:--:-- --:--:-- 53000
* Connection #0 to host 192.168.0.77 left intact
* Closing connection #0
</codeph></codeblock><p>The
				metadata matches the corresponding metadata for a data document.</p></section>
		<section><title>Deleting design documents</title><p>To delete a design document, you use the
					<codeph>DELETE</codeph> HTTP request with the URL of the corresponding design
				document. The summary information for this request is shown in the table
				below:</p><table>
				<tgroup cols="2">
					<colspec colname="col1"/>
					<colspec colname="col2"/>
					<thead>
						<row>
							<entry>Delete Design Document</entry>
							<entry>Description</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><b>Method</b></entry>
							<entry><codeph>DELETE /bucket/_design/design-doc</codeph></entry>
						</row>
						<row>
							<entry><b>Request Data</b></entry>
							<entry>Design document definition (JSON)</entry>
						</row>
						<row>
							<entry><b>Response Data</b></entry>
							<entry>Success and confirmed design document ID</entry>
						</row>
						<row>
							<entry><b>Authentication Required</b></entry>
							<entry>optional</entry>
						</row>
						<row>
							<entry><b>Return Codes</b></entry>
						</row>
						<row>
							<entry>200</entry>
							<entry>Request completed successfully.</entry>
						</row>
						<row>
							<entry>401</entry>
							<entry>The item requested was not available using the supplied
								authorization, or authorization was not supplied.</entry>
						</row>
						<row>
							<entry>404</entry>
							<entry>The requested content could not be found. The returned content
								will include further information, as a JSON object, if
								available.</entry>
						</row>
					</tbody>
				</tgroup>
			</table><p>Deleting a design document immediately invalidates the design document and
				all views and indexes associated with it. The indexes and stored data on disk are
				removed in the background.</p><p>For example, to delete the previously created
				design document using <codeph>curl</codeph>
				:</p><codeblock><codeph>&gt; curl -v -X DELETE -H 'Content-Type: application/json' \
    'http://Administrator:Password@192.168.0.77:8092/default/_design/dev_byfield'
</codeph></codeblock><p>When
				the design document has been successfully removed, the JSON returned indicates
				successful completion, and confirmation of the design document
				removed:</p><codeblock><codeph>{"ok":true,"id":"_design/dev_byfield"}
</codeph></codeblock><p>Error
				conditions will be returned if the authorization is incorrect, or the specified
				design document cannot be found.</p></section>
	</body>
</topic>
