<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE topic
  PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic xml:lang="en-us" id="topic9039">
	<title>cbtransfer tool</title>
	<body>
		<p>You use this tool to transfer data and design documents between two clusters or from a
			file to a cluster. With this tool you can also create a copy of data from a node that no
			longer running. This tool is the underlying, generic data transfer tool that
				<codeph>cbbackup</codeph> and <codeph>cbrestore</codeph> are built upon. It is a
			lightweight extract-transform-load (ETL) tool that can move data from a source to a
			destination. The source and destination parameters are similar to URLs or file
			paths.</p>
		<p>Note</p>
		<p> `cbbackup`, `cbrestore` and `cbtransfer` do not communicate with external IP addresses
			for server nodes outside of a cluster. They can only communicate with nodes from a node
			list obtained within a cluster. You should perform backup, restore, or transfer to data
			from a node within a Couchbase cluster. This also means that if you install Couchbase
			Server with the default IP address, you cannot use an external hostname to access it.
			For general information about hostnames for the server, see [Using Hostnames with
			Couchbase Server](../cb-install/#couchbase-getting-started-hostnames). </p>
		<p>The tool is at the following locations:</p>
		<table>
			<tgroup cols="2">
				<colspec colname="col1"/>
				<colspec colname="col2"/>
				<thead>
					<row>
						<entry><b>Linux</b></entry>
						<entry><codeph>/opt/couchbase/bin/</codeph></entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><b>Windows</b></entry>
						<entry><codeph>C:\Program Files\Couchbase\Server\bin\</codeph></entry>
					</row>
					<row>
						<entry><b>Mac OS X</b></entry>
						<entry><codeph>/Applications/Couchbase Server.app/Contents/Resources/couchbase-core/bin/</codeph></entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<p>The following is the syntax and examples for this command:</p>
		<codeblock><codeph>&gt; ./cbtransfer [options] source destination


Examples:
  cbtransfer http://SOURCE:8091 /backups/backup-42
  cbtransfer /backups/backup-42 http://DEST:8091
  cbtransfer /backups/backup-42 couchbase://DEST:8091
  cbtransfer http://SOURCE:8091 http://DEST:8091
  cbtransfer 1.8_COUCHBASE_BUCKET_MASTER_DB_SQLITE_FILE http://DEST:8091
  cbtransfer file.csv http://DEST:8091
</codeph></codeblock>
		<p>The following are the standard command options which you can also view with
				<codeph>cbtransfer -h</codeph> :</p>
		<table>
			<tgroup cols="2">
				<colspec colname="col1"/>
				<colspec colname="col2"/>
				<thead>
					<row>
						<entry>-h, –help</entry>
						<entry>Command help</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>–add</entry>
						<entry>Use –add instead of –set in order to not overwrite existing items in
							the destination</entry>
					</row>
					<row>
						<entry>-b BUCKET_SOURCE</entry>
						<entry>Single named bucket from source cluster to transfer</entry>
					</row>
					<row>
						<entry>-B BUCKET_DESTINATION, –bucket-destination=BUCKET_DESTINATION</entry>
						<entry>Single named bucket on destination cluster which receives transfer.
							This allows you to transfer to a bucket with a different name as your
							source bucket. If you do not provide defaults to the same name as the
							bucket-source</entry>
					</row>
					<row>
						<entry>-i ID, –id=ID</entry>
						<entry>Transfer only items that match a vbucketID</entry>
					</row>
					<row>
						<entry>-k KEY, –key=KEY</entry>
						<entry>Transfer only items with keys that match a regexp</entry>
					</row>
					<row>
						<entry>-n, –dry-run</entry>
						<entry>No actual transfer; just validate parameters, files, connectivity and
							configurations</entry>
					</row>
					<row>
						<entry>-u USERNAME, –username=USERNAME</entry>
						<entry>REST username for source cluster or server node</entry>
					</row>
					<row>
						<entry>-p PASSWORD, –password=PASSWORD</entry>
						<entry>REST password for cluster or server node</entry>
					</row>
					<row>
						<entry>-t THREADS, –threads=THREADS</entry>
						<entry>Number of concurrent workers threads performing the transfer.
							Defaults to 4.</entry>
					</row>
					<row>
						<entry>-v, –verbose</entry>
						<entry>Verbose logging; provide more verbosity</entry>
					</row>
					<row>
						<entry>-x EXTRA, –extra=EXTRA</entry>
						<entry>Provide extra, uncommon config parameters</entry>
					</row>
					<row>
						<entry>–single-node</entry>
						<entry>Transfer from a single server node in a source cluster. This single
							server node is a source node URL</entry>
					</row>
					<row>
						<entry>–source-vbucket-state=SOURCE_VBUCKET_STATE</entry>
						<entry>Only transfer from source vbuckets in this state, such as ‘active’
							(default) or ‘replica’. Must be used with Couchbase cluster as
							source.</entry>
					</row>
					<row>
						<entry>–destination-vbucket-state=DESTINATION_VBUCKET_STATE</entry>
						<entry>Only transfer to destination vbuckets in this state, such as ‘active’
							(default) or ‘replica’. Must be used with Couchbase cluster as
							destination.</entry>
					</row>
					<row>
						<entry>–destination-operation=DESTINATION_OPERATION</entry>
						<entry>Perform this operation on transfer. “set” will override an existing
							document, ‘add’ will not override, ‘get’ will load all keys transferred
							from a source cluster into the caching layer at the destination.</entry>
					</row>
					<row>
						<entry><codeph>/path/to/filename</codeph></entry>
						<entry>Export a.csv file from the server or import a.csv file to the server.
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<p>The following are extra, specialized command options you use in this form
				<codeph>cbtransfer -x [EXTRA OPTIONS]</codeph> :</p>
		<table>
			<tgroup cols="2">
				<colspec colname="col1"/>
				<colspec colname="col2"/>
				<thead>
					<row>
						<entry>batch_max_bytes=400000</entry>
						<entry>Transfer this # of bytes per batch.</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>batch_max_size=1000</entry>
						<entry>Transfer this # of documents per batch</entry>
					</row>
					<row>
						<entry>cbb_max_mb=100000</entry>
						<entry>Split backup file on destination cluster if it exceeds MB</entry>
					</row>
					<row>
						<entry>max_retry=10</entry>
						<entry>Max number of sequential retries if transfer fails</entry>
					</row>
					<row>
						<entry>nmv_retry=1</entry>
						<entry>0 or 1, where 1 retries transfer after a NOT_MY_VBUCKET message.
							Default of 1.</entry>
					</row>
					<row>
						<entry>recv_min_bytes=4096</entry>
						<entry>Amount of bytes for every TCP/IP batch transferred</entry>
					</row>
					<row>
						<entry>report=5</entry>
						<entry>Number batches transferred before updating progress bar in
							console</entry>
					</row>
					<row>
						<entry>report_full=2000</entry>
						<entry>Number batches transferred before emitting progress information in
							console</entry>
					</row>
					<row>
						<entry>try_xwm=1</entry>
						<entry>As of 2.1, transfer documents with metadata. 1 is default. 0 should
							only be used if you transfer from 1.8.x to 1.8.x.</entry>
					</row>
					<row>
						<entry>data_only=0</entry>
						<entry>For value 1, only transfer data from a backup file or
							cluster.</entry>
					</row>
					<row>
						<entry>design_doc_only=0</entry>
						<entry>For value 1, transfer design documents only from a backup file or
							cluster. Defaults to 0. </entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<p>The most important way you can use this tool is to transfer data from a Couchbase node
			that is no longer running to a cluster that is running:</p>
		<codeblock><codeph>./cbtransfer \
       couchstore-files://COUCHSTORE_BUCKET_DIR \
       couchbase://HOST:PORT \
       --bucket-destination=DESTINATION_BUCKET

./cbtransfer \
       couchstore-files:///opt/couchbase/var/lib/couchbase/data/default \
       couchbase://10.5.3.121:8091 \
       --bucket-destination=foo
</codeph></codeblock>
		<p>Upon success, the tool will output as follows:</p>
		<codeblock><codeph>[####################] 100.0% (10000/10000 msgs)
bucket: bucket_name, msgs transferred...
      : total | last | per sec
batch : 1088 | 1088 | 554.8
byte : 5783385 | 5783385 | 3502156.4
msg : 10000 | 10000 | 5230.9
done
</codeph></codeblock>
		<p>This shows we successfully transferred 10000 total documents in batch size of 1088
			documents each. This next examples shows how you can send all the data from a node to
			standard output:</p>
		<codeblock><codeph>&gt; ./cbtransfer http://10.5.2.37:8091/ stdout:
</codeph></codeblock>
		<p>Will produce a output as follows:</p>
		<codeblock><codeph>set pymc40 0 0 10
0000000000
set pymc16 0 0 10
0000000000
set pymc9 0 0 10
0000000000
set pymc53 0 0 10
0000000000
set pymc34 0 0 10
0000000000
</codeph></codeblock>
		<note type="note">Couchbase Server stores all data from a bucket, node or cluster, but not the
			associated design documents. To do so, you should explicitly use
				<codeph>cbbackup</codeph> to store the information and <codeph>cbrestore</codeph> to
			read it back into memory.</note>
		
		
		<section><title>Exporting and Importing CSV Files</title>
		<p>You can import and export well-formed.csv files with <codeph>cbtransfer</codeph>. This
			will import data into Couchbase Server as documents and will export documents from the
			server into comma-separated values. This does not include any design documents
			associated with a bucket in the cluster.</p>
		<p>For example imagine you have records as follows in the default bucket in a cluster:</p>
		<codeblock><codeph>re-fdeea652a89ec3e9,
0,
0,
4271152681275955,
"{""key"":""re-fdeea652a89ec3e9"",
 ""key_num"":4112,
 ""name"":""fdee c3e"",
 ""email"":""fdee@ea.com"",
 ""city"":""a65"",
 ""country"":""2a"",
 ""realm"":""89"",
 ""coins"":650.06,
 ""category"":1,
 ""achievements"":[77, 149, 239, 37, 76],""body"":""xc4ca4238a0b923820d
 .......
""}"
......
</codeph></codeblock>
		<p>Where <codeph>re-fdeea652a89ec3e9</codeph> is the document ID, 0 are flags, 0 is the
			expiration and the CAS value is <codeph>4271152681275955</codeph>. The actual value in
			this example is the hash starting with <codeph>"{""key""......</codeph>. To export these
			items to a.csv file perform this command:</p>
		<codeblock><codeph>./cbtransfer http://[hostname]:[port] csv:./data.csv -b default -u Administrator -p password
</codeph></codeblock>
		<p>Will transfer all items from the default bucket, <codeph>-b default</codeph> available at
			the node <codeph>http://localhost:8091</codeph> and put the items into the
				<codeph>/data.csv</codeph> file. If you provide another named bucket for the
				<codeph>-b</codeph> option, it will export items from that named bucket. You will
			need to provide credentials for the cluster when you export items from a bucket in the
			cluster. You will see output similar to that in other <codeph>cbtransfer</codeph>
			scenarios:</p>
		<codeblock><codeph>[####################] 100.0% (10000/10000 msgs)
bucket: default, msgs transferred...
       : total | last | per sec
 batch : 1053 | 1053 | 550.8
 byte : 4783385 | 4783385 | 2502156.4
 msg : 10000 | 10000 | 5230.9
2013-05-08 23:26:45,107: mt warning: cannot save bucket design on a CSV destination
done
</codeph></codeblock>
		<p>This shows we transferred 1053 batches of data at 550.8 batches per second. The tool
			outputs “cannot save bucket design….” to indicate that no design documents were
			exported. To import information from a.csv file to a named bucket in a cluster:</p>
		<codeblock><codeph>./cbtransfer /data.csv http://[hostname]:[port] -B bucket_name -u Administrator -p password
</codeph></codeblock>
		<p>If your.csv is not correctly formatted you will see the following error during
			import:</p>
		<codeblock><codeph>w0 error: fails to read from csv file, .....
</codeph></codeblock>
			
		</section>
		
		<section><title>Transferring Design Documents Only</title>
		<p>You can transfer design documents from one cluster to another one with the option,
				<codeph>design_doc_only=1</codeph> :</p>
		<codeblock><codeph>&gt; ./cbtransfer http://10.5.2.30:8091 http://10.3.1.10:8091 -x design_doc_only=1 -b bucket_one -B bucket_two
transfer design doc only. bucket msgs will be skipped.
done
</codeph></codeblock>
		<p>This will transfer all design documents associated with <codeph>bucket_one</codeph> to
				<codeph>bucket_two</codeph> on the cluster with node
				<codeph>http://10.3.1.10:8091</codeph>. In Couchbase Web Console you can see this
			updated design documents when you click on the View tab and select
				<codeph>bucket_two</codeph> in the drop-down.</p>
			
		</section>
	</body>
</topic>
